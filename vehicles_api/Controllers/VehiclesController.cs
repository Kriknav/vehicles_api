using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Linq;
using vehicles_api.Models;
using vehicles_api.Filters;

namespace vehicles_api.Controllers
{
    [Route("[controller]")]
    public class VehiclesController : ControllerBase
    {
        private readonly VehicleContext _context;
        private readonly IVehicleFilterService _filterSvc;

        public VehiclesController(VehicleContext context, IVehicleFilterService filterSvc)
        {
            _context = context;
            _filterSvc = filterSvc;
        }       

        [HttpGet]
        public IActionResult GetAll([FromQuery] VehicleFilters filteringParams)
        {
            if (!ModelState.IsValid) 
            { return BadRequest(); }

            return Ok(_filterSvc.GetVehicles(filteringParams, _context));
        }

        [HttpGet("{id}", Name = "GetVehicle")]
        public IActionResult GetById(int id)
        {
            var item = _context.Vehicles.Find(id);
            if (item == null)
            {
                return NotFound();
            }
            return Ok(item);
        }

        [HttpPost]
        public IActionResult Create([FromBody] Vehicle item)
        {
            if (item == null || !ModelState.IsValid)
            {
                return BadRequest();
            }

            _context.Vehicles.Add(item);
            _context.SaveChanges();

            return CreatedAtRoute("GetVehicle", new { id = item.Id }, item);
        }

        [HttpPut("{id}")]
        public IActionResult Update(int id, [FromBody] Vehicle item)
        {
            if (item == null || item.Id != id || !ModelState.IsValid)
            {
                return BadRequest();
            }

            var found = _context.Vehicles.Find(id);

            // If item is not found, we have a couple options:
            if (found == null)
            {
                // Option 1: 
                // Vehicle not found by id, assume it's a new item and add it
                item.Id = 0; // reset the id so it'll be autogenerated
                return Create(item);

                // Option 2:
                // Return a Not Found response so the consumer can handle it themselves
                //return NotFound();
            }

            found.Year = item.Year;
            found.Model = item.Model;
            found.Make = item.Make;

            _context.Vehicles.Update(found);
            _context.SaveChanges();
            return NoContent();
        }

        [HttpDelete("{id}")]
        public IActionResult Delete(int id)
        {
            var todo = _context.Vehicles.Find(id);
            if (todo == null)
            {
                return NotFound();
            }

            _context.Vehicles.Remove(todo);
            _context.SaveChanges();
            return NoContent();
        }
    }
}